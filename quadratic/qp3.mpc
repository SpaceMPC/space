import ml
#program.use_edabit(True)

# sfix: fixed-point numbers

# set the precision after the dot and in total

sfix.set_precision(16, 31)

#make P1 matrix
P1 = Matrix(3, 3, sfix)
P1.assign_all(0)
P1[0][0] = 1
P1[1][1] = 1
P1[2][2] = 1

#make P2 matrix
P2 = Matrix(3, 3, sfix)
P2.assign_all(0)
P2[0][0] = 2
P2[1][1] = 2
P2[2][2] = 2

#make P3 matrix
P3 = Matrix(3, 3, sfix)
P3.assign_all(0)
P3[0][0] = 3
P3[1][1] = 3
P3[2][2] = 3

#make xhat matrices 
xhat1 = Matrix(3, 1, sfix)
xhat1[0][0] = 1
xhat1[1][0] = 1
xhat1[2][0] = 1
xhat2 = Matrix(3, 1, sfix)
xhat2[0][0] = 2
xhat2[1][0] = 2
xhat2[2][0] = 2
xhat3 = Matrix(3, 1, sfix)
xhat3[0][0] = 3
xhat3[1][0] = 3
xhat3[2][0] = 3

P1_inverse = ml.mr(P1,1)
P2_inverse = ml.mr(P2,1)
P3_inverse = ml.mr(P3,1)

M = P1_inverse + P2_inverse + P3_inverse
V = P1_inverse*xhat1 + P2_inverse*xhat2 + P3_inverse*xhat3
M_inverse = ml.mr(M,1)
e = M_inverse*V

M = M.reveal()
V = V.reveal()
e = e.reveal()
print_ln("M: ")
for i in range(3):
    print_ln("%s", M[i])
print_ln("V: ")
for i in range(3):
    print_ln("%s", V[i])
print_ln("e: ")
for i in range(3):
    print_ln("%s", e[i])
